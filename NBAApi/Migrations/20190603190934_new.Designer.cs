// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NBAApi.Data;

namespace NBAApi.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20190603190934_new")]
    partial class @new
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("NBAApi.Data.Models.Game", b =>
                {
                    b.Property<int>("GameID");

                    b.Property<int?>("AwayTeamID");

                    b.Property<int?>("AwayTeamMoneyLine");

                    b.Property<int?>("AwayTeamScore");

                    b.Property<DateTime>("DateTime");

                    b.Property<int?>("HomeTeamID");

                    b.Property<int?>("HomeTeamMoneyLine");

                    b.Property<int?>("HomeTeamScore");

                    b.Property<decimal?>("OverUnder")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("PointSpread")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("Season");

                    b.Property<int?>("SeasonType");

                    b.Property<string>("Status");

                    b.Property<DateTime>("TimeStamp");

                    b.Property<DateTime?>("Updated");

                    b.HasKey("GameID");

                    b.HasIndex("AwayTeamID");

                    b.HasIndex("HomeTeamID");

                    b.ToTable("Game");
                });

            modelBuilder.Entity("NBAApi.Data.Models.News", b =>
                {
                    b.Property<int>("NewsID");

                    b.Property<string>("Author");

                    b.Property<string>("Content");

                    b.Property<int>("PlayerID");

                    b.Property<string>("Source");

                    b.Property<DateTime>("TimeStamp");

                    b.Property<string>("Title");

                    b.Property<DateTime>("Updated");

                    b.Property<string>("Url");

                    b.HasKey("NewsID");

                    b.HasIndex("PlayerID");

                    b.ToTable("News");
                });

            modelBuilder.Entity("NBAApi.Data.Models.PlayerGameStats", b =>
                {
                    b.Property<int>("StatID");

                    b.Property<decimal>("Assists")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("BlockedShots")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("DefensiveRebounds")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("FieldGoalsAttempted")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("FieldGoalsMade")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("FieldGoalsPercentage")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("FreeThrowsAttempted")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("FreeThrowsMade")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("FreeThrowsPercentage")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("GameID");

                    b.Property<int>("Minutes");

                    b.Property<decimal>("OffensiveRebounds")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("PersonalFouls")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("PlayerID");

                    b.Property<decimal>("PlusMinus")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("Points")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("Rebounds")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("Started");

                    b.Property<decimal>("Steals")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("ThreePointersAttempted")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("ThreePointersMade")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("ThreePointersPercentage")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("TimeStamp");

                    b.Property<decimal>("Turnovers")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("Updated");

                    b.HasKey("StatID");

                    b.HasIndex("GameID");

                    b.HasIndex("PlayerID");

                    b.ToTable("PlayerGameStats");
                });

            modelBuilder.Entity("NBAApi.Data.Models.PlayerSeasonStats", b =>
                {
                    b.Property<int>("StatID");

                    b.Property<decimal>("Assists")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("BlockedShots")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("FieldGoalsPercentage")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("FreeThrowsPercentage")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("Games");

                    b.Property<int>("PlayerID");

                    b.Property<decimal>("Points")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("Rebounds")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("Steals")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("ThreePointersMade")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("TimeStamp");

                    b.Property<decimal>("Turnovers")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("StatID");

                    b.HasIndex("PlayerID")
                        .IsUnique();

                    b.ToTable("PlayerSeasonStats");
                });

            modelBuilder.Entity("NBAApi.Data.Models.Standings", b =>
                {
                    b.Property<int>("TeamID");

                    b.Property<int>("AwayLosses");

                    b.Property<int>("AwayWins");

                    b.Property<int>("ConferenceLosses");

                    b.Property<int>("ConferenceWins");

                    b.Property<int>("DivisionLosses");

                    b.Property<int>("DivisionWins");

                    b.Property<decimal>("GamesBack")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("HomeLosses");

                    b.Property<int>("HomeWins");

                    b.Property<int>("LastTenLosses");

                    b.Property<int>("LastTenWins");

                    b.Property<int>("Losses");

                    b.Property<decimal>("Percentage")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("Streak");

                    b.Property<DateTime>("TimeStamp");

                    b.Property<int>("Wins");

                    b.HasKey("TeamID");

                    b.ToTable("Standings");
                });

            modelBuilder.Entity("NBAApi.Data.Models.Team", b =>
                {
                    b.Property<int>("TeamID");

                    b.Property<string>("City");

                    b.Property<string>("Conference");

                    b.Property<string>("Division");

                    b.Property<string>("Key")
                        .IsRequired();

                    b.Property<string>("LeagueID");

                    b.Property<string>("Name");

                    b.Property<string>("PrimaryColor");

                    b.Property<string>("SecondaryColor");

                    b.Property<string>("TertiaryColor");

                    b.Property<DateTime>("TimeStamp");

                    b.Property<string>("WikipediaLogoUrl");

                    b.HasKey("TeamID");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("NBAApi.Data.Player", b =>
                {
                    b.Property<int>("PlayerID");

                    b.Property<DateTime?>("BirthDate");

                    b.Property<string>("FirstName");

                    b.Property<int?>("Height");

                    b.Property<int>("Jersey");

                    b.Property<string>("LastName");

                    b.Property<string>("PhotoUrl");

                    b.Property<string>("Position");

                    b.Property<string>("Status");

                    b.Property<int>("TeamID");

                    b.Property<DateTime>("TimeStamp");

                    b.Property<string>("UsaTodayHeadshotUrl");

                    b.Property<int?>("Weight");

                    b.HasKey("PlayerID");

                    b.HasIndex("TeamID");

                    b.ToTable("Player");
                });

            modelBuilder.Entity("NBAApi.Data.Models.Game", b =>
                {
                    b.HasOne("NBAApi.Data.Models.Team", "AwayTeamNav")
                        .WithMany("AwayGamesNav")
                        .HasForeignKey("AwayTeamID");

                    b.HasOne("NBAApi.Data.Models.Team", "HomeTeamNav")
                        .WithMany("HomeGamesNav")
                        .HasForeignKey("HomeTeamID");
                });

            modelBuilder.Entity("NBAApi.Data.Models.News", b =>
                {
                    b.HasOne("NBAApi.Data.Player", "PlayerNav")
                        .WithMany("NewsNav")
                        .HasForeignKey("PlayerID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NBAApi.Data.Models.PlayerGameStats", b =>
                {
                    b.HasOne("NBAApi.Data.Models.Game", "GameNav")
                        .WithMany("PlayerGameStatsNav")
                        .HasForeignKey("GameID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NBAApi.Data.Player", "PlayerNav")
                        .WithMany("GameStatsNav")
                        .HasForeignKey("PlayerID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NBAApi.Data.Models.PlayerSeasonStats", b =>
                {
                    b.HasOne("NBAApi.Data.Player", "PlayNav")
                        .WithOne("StatsNav")
                        .HasForeignKey("NBAApi.Data.Models.PlayerSeasonStats", "PlayerID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NBAApi.Data.Models.Standings", b =>
                {
                    b.HasOne("NBAApi.Data.Models.Team", "TeamNav")
                        .WithOne("RecordNav")
                        .HasForeignKey("NBAApi.Data.Models.Standings", "TeamID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NBAApi.Data.Player", b =>
                {
                    b.HasOne("NBAApi.Data.Models.Team", "TeamNav")
                        .WithMany("PlayersNav")
                        .HasForeignKey("TeamID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
